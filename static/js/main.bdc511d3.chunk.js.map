{"version":3,"sources":["Components/scotia.jpg","Components/t1.jpg","Components/t2.gif","Components/t3.jpg","Components/t4.jpg","Components/t5.jpg","Components/t6.jpg","Components/t7.png","Components/t8.jpg","logo.svg","Components/redmain.jpg","Components/Idea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","StyledImage","img","StyledTitle","Idea","src","this","props","image","info","infotwo","React","Component","Background","Box","CardHolder","IdeaHolder","Title","IdeaTitle","Titleimg","TileTitle","App","href","rel","scotia","t1","t2","t3","t4","t5","t6","t7","t8","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,yECA3CD,EAAOC,QAAU,IAA0B,kC,oCCA3CD,EAAOC,QAAU,IAA0B,qC,quBCG3C,IAAMC,EAAYC,IAAOC,IAAV,KAaTC,EAAcF,IAAOG,IAAV,KAQXC,EAAcJ,IAAOC,IAAV,KAqBFI,E,uKAZP,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,CAAaI,IAAKC,KAAKC,MAAMC,QAC7B,kBAACL,EAAD,KAAcG,KAAKC,MAAME,MACzB,kBAACN,EAAD,KAAcG,KAAKC,MAAMG,c,GANtBC,IAAMC,W,89CCdzB,IAAMC,EAAad,IAAOC,IAAV,KAIVc,EAAMf,IAAOC,IAAV,KAOHe,EAAahB,IAAOC,IAAV,KAYVgB,EAAajB,IAAOC,IAAV,KAGViB,EAAQlB,IAAOC,IAAV,KAULkB,EAAYnB,IAAOC,IAAV,KAKTmB,EAAWpB,IAAOG,IAAV,KASRkB,EAAYrB,IAAOC,IAAV,KA4DAqB,OAnDf,WACE,OACE,kBAACR,EAAD,KACE,0BAAMS,KAAK,0EAA0EC,IAAI,eACvF,kBAACT,EAAD,KACI,kBAACG,EAAD,6BAEE,kBAACC,EAAD,uBACA,kBAACA,EAAD,0BACA,kBAACA,EAAD,yBAEF,kBAACC,EAAD,CAAWd,IAAOmB,OAGtB,kBAACR,EAAD,KAEI,kBAACD,EAAD,KACA,kBAACK,EAAD,uBACE,kBAAC,EAAD,CAAMZ,MAASiB,IACfhB,KAAM,uHACN,kBAAC,EAAD,CAAMD,MAASkB,IACfjB,KAAO,uMACPC,QAAS,2LACT,kBAAC,EAAD,CAAMF,MAASmB,IACflB,KAAM,sPAGR,kBAACM,EAAD,KACA,kBAACK,EAAD,0BACE,kBAAC,EAAD,CAAMZ,MAASoB,IACfnB,KAAM,8NAEN,kBAAC,EAAD,CAAMD,MAASqB,IACfpB,KAAM,gFACNC,QAAS,0JACT,kBAAC,EAAD,CAAMF,MAASsB,IACfrB,KAAM,sHAGR,kBAACM,EAAD,KACA,kBAACK,EAAD,wBACE,kBAAC,EAAD,CAAMZ,MAASuB,IACftB,KAAM,yJACN,kBAAC,EAAD,CAAMD,MAASwB,IACdvB,KAAM,qHC5GDwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdc511d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scotia.11242bb5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t1.ecff2ead.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t2.88382c57.gif\";","module.exports = __webpack_public_path__ + \"static/media/t3.4c659677.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t4.ae8ab370.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t5.79b7d5f2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t6.cdb911bb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t7.34383e6d.png\";","module.exports = __webpack_public_path__ + \"static/media/t8.1c1f3541.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/redmain.c99e8042.jpg\";","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div `\r\n    height: 500px;\r\n    width: 300px;\r\n    padding: 15px;\r\n    padding: 15px;\r\n  padding-top: 0px;\r\n  box-shadow: 5px 10px 8px #888888;\r\n  border-radius: 5px;\r\n  margin: 20px;\r\n  background-color: white;\r\n  \r\n`\r\n\r\nconst StyledImage = styled.img `\r\nheight: 175px;\r\nwidth: 300px;\r\ndisplay: inline-block;\r\nmargin-top: 15px;\r\nborder-radius: 5px;\r\n`\r\n\r\nconst StyledTitle = styled.div `\r\nwidth: 300px;\r\nmargin: 10px;\r\nfont-size: 18px;\r\nfont-family: 'Rajdhani', sans-serif;\r\n`\r\n\r\nclass Idea extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <StyledImage src={this.props.image}/>\r\n                <StyledTitle>{this.props.info}</StyledTitle>\r\n                <StyledTitle>{this.props.infotwo}</StyledTitle>\r\n                \r\n\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default Idea;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components'\nimport Idea from './Components/Idea'\nimport image from './Components/redmain.jpg'\nimport scotia from './Components/scotia.jpg'\nimport t1 from './Components/t1.jpg'\nimport t2 from './Components/t2.gif'\nimport t3 from './Components/t3.jpg'\nimport t4 from './Components/t4.jpg'\nimport t5 from './Components/t5.jpg'\nimport t6 from './Components/t6.jpg'\nimport t7 from './Components/t7.png'\nimport t8 from './Components/t8.jpg'\n\n\nconst Background = styled.div`\nbackground-color: #f9f9f9;\n  `\n\nconst Box = styled.div`\n  display:flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  padding-top: 0px\n  `\n\nconst CardHolder = styled.div`\ndisplay:flex;\nflex-direction: row;\nflex-wrap: wrap;\njustify-content: left;\nbackground-color: white;\nborder-radius: 5px;\nmargin-left: 15%;\nmargin-right: 15%;\ntransform: translate(0px, -8%);\n`\n\nconst IdeaHolder = styled.div `\n`\n\nconst Title = styled.div `\nfont-family: 'Rajdhani', sans-serif;\nflex: 1;\nbackground-color:red;\ncolor: white;\nfont-size: 60px;\npadding-left: 30px;\npadding-top: 20px;\n`\n\nconst IdeaTitle = styled.div `\nfont-family: 'Rajdhani', sans-serif;\nfont-size: 30px;\nfont-weight: 200;\n`\nconst Titleimg = styled.img `\nflex: 1;\nmin-width: 0;\nbackground-color: blue;\nheight: 400px;\nmax-width: 100%;\nobject-fit:cover;\n`\n\nconst TileTitle = styled.div`\nfont-family: 'Rajdhani', sans-serif;\nfont-size: 30px;\nfont-weight: 100;\npadding:15px;\npadding-left: 40px;\nflex-basis: 100%;\n\n`\nfunction App() {\n  return (\n    <Background>\n      <link href=\"https://fonts.googleapis.com/css2?family=Rajdhani:wght@400&display=swap\" rel=\"stylesheet\"></link>\n        <Box>\n            <Title>\n              The Future Of Banking\n              <IdeaTitle>Data Analytics</IdeaTitle>\n              <IdeaTitle>AI and Automation</IdeaTitle>\n              <IdeaTitle>Digital Banking</IdeaTitle>\n            </Title>\n            <Titleimg  src = {scotia} />\n        </Box>\n\n        <IdeaHolder>\n          \n            <CardHolder>\n            <TileTitle>Data Analytics</TileTitle>\n              <Idea image = {t1}\n              info={\"Future of retail banking will be data driven with data being one of the most sought after resources of the future.\"}/>\n              <Idea image = {t2}\n              info ={\"Consumer data will be heavily collected and used to create unique solutions for unique customer  problems. For instance, \\\"which credit card would better suit your spending habits and lifestyle...\\\"\"}\n              infotwo={\"This will allow users who don't visit physical branches often to obtain personalized interactions based on data collected from them without having to book appointments with advisors.\"}/>\n              <Idea image = {t3}\n              info={\"Security will become a key aspect of a data driven banking industry - with more uses of biometrics as a security measure for both retail and commercial banking customers. Banks must focus on preventing the likes of biometrics data scraping.\"}/>\n            </CardHolder>\n\n            <CardHolder>\n            <TileTitle>AI and Automation</TileTitle>\n              <Idea image = {t4}\n              info={\"There will be a heavy emphasis on streamlining processes within the banking industry. Back office data processing jobs can be automated. This doesn't necessarily mean less jobs, that the job process is more efficient.\"}\n              />\n              <Idea image = {t5}\n              info={\"A lot of financial advising work can be done through artificial intelligence.\"}\n              infotwo={\"\\\"43% of Millennials aren't investing\\\" - Per Yahoo Finance - banking industry will aim to bring this number down by simplifying investing through AI.\"}/>\n              <Idea image = {t6}\n              info={\"Credit risk assessment will be done through machine learning by recognizing patterns and behaviour of borrowers.\"} />\n            </CardHolder>\n\n            <CardHolder>\n            <TileTitle>Digital Banking</TileTitle>\n              <Idea image = {t7}\n              info={\"There will be less fiat money used, but rather a digitized way of paying by using your personal device to pay with money from your checking account.\"}/>\n              <Idea image = {t8}\n               info={\"Banks using CRM software will eventually take all processes digital - beyond the scope of current CRM tasks.\"}/>\n            </CardHolder>\n        </IdeaHolder>\n    </Background>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}